// util inserted here

// #version 430 core
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer bufferA
{
    vector_float3 compiled_vertices[];
};

layout(std430, binding = 2) buffer bufferB
{
    int num_ui_vertices;
    vector_int3 ui_vertices[];
};

layout(std430, binding = 3) buffer bufferC
{
    uint element_ids[];
};

layout(std430, binding = 4) buffer bufferD
{
    UIElementTransform element_transforms[];
};

layout(std430, binding = 5) buffer bufferE
{
    WindowAttributes window_attr;
};

layout(std430, binding = 6) buffer bufferF
{
    CompiledBufferKeyIndices key_indices;
};

void main() {
    uint vid = gl_GlobalInvocationID.x; // 1 Dimensional (right?)

    if (vid >= num_ui_vertices) {
        return;
    }

    // get ui vertex
    vector_int3 v = ui_vertices[vid];
    // get transform
    UIElementTransform et = element_transforms[element_ids[vid]];
    // create vertex and set to start of element transform space (in world space)
    vector_float3 ret;
    ret.x = et.position.x;
    ret.y = et.position.y;
    ret.z = float(et.position.z + v.z)/100;
    
    // transform to vertex location (account for rotated element with right and up vectors)
    ret.x += et.right.x * v.x + et.up.x * v.y;
    ret.y += et.right.y * v.x + et.up.y * v.y;

    // convert to screen coords
    ret.x /= window_attr.width/2;
    ret.y /= window_attr.height/2;
    
    // set in compiled vertex buffer
    uint cvb_ui_start = key_indices.compiled_vertex_ui_start+vid;
    compiled_vertices[cvb_ui_start] = ret;
}