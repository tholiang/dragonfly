// util inserted here

// #version 430 core
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer bufferA
{
    vector_float3 compiled_vertices[];
};

layout(std430, binding = 2) buffer bufferB
{
    Face compiled_faces[];
};

layout(std430, binding = 3) buffer bufferC
{
    int num_dots;
    vector_float2 dots[];
};

layout(std430, binding = 4) buffer bufferD
{
    ModelTransform slice_transforms[];
};

layout(std430, binding = 5) buffer bufferE
{
    Camera camera;
};

layout(std430, binding = 6) buffer bufferF
{
    uint dot_slice_ids[];
};

layout(std430, binding = 7) buffer bufferG
{
    WindowAttributes window_attr;
};

layout(std430, binding = 8) buffer bufferH
{
    CompiledBufferKeyIndices key_indices;
};

void main() {
    uint did = gl_GlobalInvocationID.x; // 1 Dimensional (right?)

    if (did >= num_dots) {
        return;
    }

    // project dot to vertex
    vector_float2 d = dots[did];
    vector_float3 dot3d; // need to make intermediate vertex to call function
    dot3d.x = d.x;
    dot3d.y = d.y;
    dot3d.z = 0;
    
    uint sid = dot_slice_ids[did];
    dot3d = TranslatePointToStandard(slice_transforms[sid].b, dot3d);
    
    // set dot in cvb
    uint cvb_dot_idx = key_indices.compiled_vertex_dot_start + did;
    vector_float3 proj_dot;
    
    proj_dot = PointToPixel(dot3d, camera);
    proj_dot.z -= 0.01;
    compiled_vertices[cvb_dot_idx] = proj_dot;
    
    // set (4) dot square corners in cvb
    float screen_ratio = float(window_attr.height) / window_attr.width;
    uint cvb_dot_corner_idx = key_indices.compiled_vertex_dot_square_start + did*4;
    compiled_vertices[cvb_dot_corner_idx+0] = vector_make_float3(proj_dot.x-0.007, proj_dot.y-0.007 * screen_ratio, proj_dot.z+0.01);
    compiled_vertices[cvb_dot_corner_idx+1] = vector_make_float3(proj_dot.x-0.007, proj_dot.y+0.007 * screen_ratio, proj_dot.z+0.01);
    compiled_vertices[cvb_dot_corner_idx+2] = vector_make_float3(proj_dot.x+0.007, proj_dot.y-0.007 * screen_ratio, proj_dot.z+0.01);
    compiled_vertices[cvb_dot_corner_idx+3] = vector_make_float3(proj_dot.x+0.007, proj_dot.y+0.007 * screen_ratio, proj_dot.z+0.01);
    
    // set (2) dot square faces in cfb
    uint cfb_dot_square_idx = key_indices.compiled_face_dot_square_start + did*2;
    Face f1;
    f1.color = vector_make_float4(0, 1, 0, 1);
    f1.vertices[0] = cvb_dot_corner_idx+0;
    f1.vertices[1] = cvb_dot_corner_idx+1;
    f1.vertices[2] = cvb_dot_corner_idx+2;
    compiled_faces[cfb_dot_square_idx+0] = f1;
    
    Face f2;
    f2.color = vector_make_float4(0, 1, 0, 1);
    f2.vertices[0] = cvb_dot_corner_idx+1;
    f2.vertices[1] = cvb_dot_corner_idx+2;
    f2.vertices[2] = cvb_dot_corner_idx+3;
    compiled_faces[cfb_dot_square_idx+1] = f2;
}