// util inserted here

// #version 430 core
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer bufferA
{
    Face compiled_faces[];
};

layout(std430, binding = 2) buffer bufferB
{
    int num_faces;
    Face faces[];
};

layout(std430, binding = 3) buffer bufferC
{
    int num_vertices;
    vector_float3 vertices[];
};

layout(std430, binding = 4) buffer bufferD
{
    int num_lights;
    SimpleLight lights[];
};

layout(std430, binding = 5) buffer bufferE
{
    CompiledBufferKeyIndices key_indices;
};

void main() {
    uint fid = gl_GlobalInvocationID.x; // 1 Dimensional (right?)

    if (fid >= num_faces) {
        return;
    }

    // get scene face and calculate normal
    Face f = faces[fid];
    vector_float3 f_norm = cross_product(vertices[f.vertices[0]], vertices[f.vertices[1]], vertices[f.vertices[2]]);
    if (f.normal_reversed != 0) {
        f_norm.x *= -1;
        f_norm.y *= -1;
        f_norm.z *= -1;
    }
    
    vector_float3 center = TriAvg(vertices[f.vertices[0]], vertices[f.vertices[1]], vertices[f.vertices[2]]);

    vector_float4 endcolor = vector_float4(0,0,0,f.color.w);
    for (int i = 0; i < num_lights; i++) {
        // get light intensity at face point
        vector_float3 light_basis_point = TranslatePointToBasis(lights[i].b, center);
        float d = 1 / sqrt(pow(light_basis_point.x, 2) + pow(light_basis_point.y, 2) + pow(light_basis_point.z, 2));
        float a = 1 / angle_between(light_basis_point, vector_make_float3(1, 0, 0));
        float dmod = lights[i].distance_falloff.x * pow(d, 2) + lights[i].distance_falloff.y * d + lights[i].distance_falloff.z;
        float amod = lights[i].angle_falloff.x * pow(a, 2) + lights[i].angle_falloff.y * a + lights[i].angle_falloff.z;
        float intens = lights[i].max_intensity * dmod * amod;

        // get angle between normal and light
        vector_float3 rev_dir = unit_vector(SubtractVectors(lights[i].b.pos, center));
        float ang = 1 - abs(angle_between(f_norm, rev_dir)) / pi;
        intens *= ang * f.shading_multiplier;

        // get color
        endcolor.x += f.color.x * intens * lights[i].color.x;
        endcolor.y += f.color.y * intens * lights[i].color.y;
        endcolor.z += f.color.z * intens * lights[i].color.z;
    }
        
    // set face in compiled face buffer
    f.color = endcolor;
    uint cfb_scene_face_idx = key_indices.compiled_face_scene_start+fid;
    compiled_faces[cfb_scene_face_idx] = f;
}