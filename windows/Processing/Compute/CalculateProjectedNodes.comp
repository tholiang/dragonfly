// util inserted here

// #version 430 core
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer bufferA
{
    vector_float3 compiled_vertices[];
};

layout(std430, binding = 2) buffer bufferB
{
    Face compiled_faces[];
};

layout(std430, binding = 3) buffer bufferC
{
    int num_nodes;
    Node nodes[];
};

layout(std430, binding = 4) buffer bufferD
{
    Camera camera;
};

layout(std430, binding = 5) buffer bufferE
{
    WindowAttributes window_attr;
};

layout(std430, binding = 6) buffer bufferF
{
    CompiledBufferKeyIndices key_indices;
};

void main() {
    uint nid = gl_GlobalInvocationID.x; // 1 Dimensional (right?)

    if (nid >= num_nodes) {
        return;
    }

    float screen_ratio = float(window_attr.height) / window_attr.width;
    
    // get projected node vertex
    vector_float3 proj_node_center = PointToPixel(nodes[nid].b.pos, camera);
    
    // add circle vertices to cvb abd faces to cfb
    uint cvb_node_circle_idx = key_indices.compiled_vertex_node_circle_start+nid*9;
    uint cfb_node_circle_idx = key_indices.compiled_face_node_circle_start+nid*8;
    
    // center
    compiled_vertices[cvb_node_circle_idx+0] = proj_node_center;
    
    // circle vertices and faces
    for (int i = 0; i < 8; i++) {
        // make radius smaller the farther away
        float radius = 1/(500*proj_node_center.z);
        // get angle from index
        float angle = i*pi/4;
        
        // calculate value (with trig) and add to cvb
        compiled_vertices[cvb_node_circle_idx+1+i] = vector_make_float3(proj_node_center.x + radius * cos(angle), proj_node_center.y + (radius * sin(angle) / screen_ratio), proj_node_center.z+0.02);
        
        // add face to cfb
        Face f;
        f.color = vector_float4(0.8, 0.8, 0.9, 1);
        f.vertices[0] = cvb_node_circle_idx; // center
        f.vertices[1] = cvb_node_circle_idx+1+i; // just added vertex
        f.vertices[2] = cvb_node_circle_idx+(1+(1+i)%8); // next vertex (or first added if at the end)
        compiled_faces[cfb_node_circle_idx+i] = f;
    }
}